{"ast":null,"code":"class Auth {\n  constructor(baseUrl) {\n    this._baseUrl = baseUrl;\n  }\n  _testRes(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n  register(_ref) {\n    let {\n      password,\n      email\n    } = _ref;\n    return fetch(`${this._baseUrl}/signup`, {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        password,\n        email\n      })\n    }).then(res => this._testRes(res));\n  }\n  authorizer(_ref2) {\n    let {\n      password,\n      email\n    } = _ref2;\n    return fetch(`${this._baseUrl}/signin`, {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        password,\n        email\n      })\n    }).then(res => this._testRes(res));\n  }\n  tokenCheck(currentToken) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'GET',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${currentToken}`\n      }\n    }).then(res => this._testRes(res));\n  }\n}\nexport const auth = new Auth('https://auth.nomoreparties.co');","map":{"version":3,"names":["Auth","constructor","baseUrl","_baseUrl","_testRes","res","ok","json","Promise","reject","status","register","_ref","password","email","fetch","method","headers","body","JSON","stringify","then","authorizer","_ref2","tokenCheck","currentToken","auth"],"sources":["/Users/mark/dev/react-mesto-auth/src/utils/Auth.js"],"sourcesContent":["class Auth {\n    constructor(baseUrl){\n        this._baseUrl = baseUrl;\n    }\n\n    _testRes(res) {\n        if (res.ok) {\n            return res.json();\n        }\n        return Promise.reject(`Ошибка: ${res.status}`);\n    }\n\n    register({ password, email }) {\n        return fetch(`${this._baseUrl}/signup`, { \n            method: 'POST',\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({password, email})\n        })\n        .then(res => this._testRes(res))\n    }\n\n    authorizer({ password, email }) {\n        return fetch(`${this._baseUrl}/signin`, { \n            method: 'POST',\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({password, email})\n        })\n        .then(res => this._testRes(res))\n    }\n\n    tokenCheck(currentToken) {\n        return fetch(`${this._baseUrl}/users/me`, {\n            method: 'GET',\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\" : `Bearer ${currentToken}`\n            },\n        })\n        .then(res => this._testRes(res))\n    }\n}\n\nexport const auth = new Auth('https://auth.nomoreparties.co');"],"mappings":"AAAA,MAAMA,IAAI,CAAC;EACPC,WAAWA,CAACC,OAAO,EAAC;IAChB,IAAI,CAACC,QAAQ,GAAGD,OAAO;EAC3B;EAEAE,QAAQA,CAACC,GAAG,EAAE;IACV,IAAIA,GAAG,CAACC,EAAE,EAAE;MACR,OAAOD,GAAG,CAACE,IAAI,CAAC,CAAC;IACrB;IACA,OAAOC,OAAO,CAACC,MAAM,CAAE,WAAUJ,GAAG,CAACK,MAAO,EAAC,CAAC;EAClD;EAEAC,QAAQA,CAAAC,IAAA,EAAsB;IAAA,IAArB;MAAEC,QAAQ;MAAEC;IAAM,CAAC,GAAAF,IAAA;IACxB,OAAOG,KAAK,CAAE,GAAE,IAAI,CAACZ,QAAS,SAAQ,EAAE;MACpCa,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAACP,QAAQ;QAAEC;MAAK,CAAC;IAC1C,CAAC,CAAC,CACDO,IAAI,CAAChB,GAAG,IAAI,IAAI,CAACD,QAAQ,CAACC,GAAG,CAAC,CAAC;EACpC;EAEAiB,UAAUA,CAAAC,KAAA,EAAsB;IAAA,IAArB;MAAEV,QAAQ;MAAEC;IAAM,CAAC,GAAAS,KAAA;IAC1B,OAAOR,KAAK,CAAE,GAAE,IAAI,CAACZ,QAAS,SAAQ,EAAE;MACpCa,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAACP,QAAQ;QAAEC;MAAK,CAAC;IAC1C,CAAC,CAAC,CACDO,IAAI,CAAChB,GAAG,IAAI,IAAI,CAACD,QAAQ,CAACC,GAAG,CAAC,CAAC;EACpC;EAEAmB,UAAUA,CAACC,YAAY,EAAE;IACrB,OAAOV,KAAK,CAAE,GAAE,IAAI,CAACZ,QAAS,WAAU,EAAE;MACtCa,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAI,UAASQ,YAAa;MAC7C;IACJ,CAAC,CAAC,CACDJ,IAAI,CAAChB,GAAG,IAAI,IAAI,CAACD,QAAQ,CAACC,GAAG,CAAC,CAAC;EACpC;AACJ;AAEA,OAAO,MAAMqB,IAAI,GAAG,IAAI1B,IAAI,CAAC,+BAA+B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}