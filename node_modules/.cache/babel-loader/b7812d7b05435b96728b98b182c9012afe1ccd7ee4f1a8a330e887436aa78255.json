{"ast":null,"code":"class Api {\n  constructor(settings) {\n    this._baseUrl = settings.baseUrl;\n    this._headers = settings.headers;\n  }\n  _testRes(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n  getUserInfo() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers\n    }).then(res => this._testRes(res));\n  }\n  getDefoltElements() {\n    return fetch(`${this._baseUrl}/cards`, {\n      headers: this._headers\n    }).then(res => this._testRes(res));\n  }\n  postNewCard(cardInfo) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: cardInfo.name,\n        link: cardInfo.link\n      })\n    }).then(res => this._testRes(res));\n  }\n  deleteCard(cardData) {\n    return fetch(`${this._baseUrl}/cards/${cardData._id}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(res => this._testRes(res));\n  }\n  patchUserInfo(userData) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: userData.name,\n        about: userData.about\n      })\n    }).then(res => this._testRes(res));\n  }\n  changeLikeCardStatus(cardId, isLiked) {\n    if (!isLiked) {\n      return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n        method: 'PUT',\n        headers: this._headers\n      }).then(res => this._testRes(res));\n    } else {\n      return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n        method: 'DELETE',\n        headers: this._headers\n      }).then(res => this._testRes(res));\n    }\n  }\n  patchAvatar(avatarData) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: avatarData.avatarurl\n      })\n    }).then(res => this._testRes(res));\n  }\n}\nexport const api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-64',\n  headers: {\n    authorization: '6891c063-8435-431b-87d5-a0d9903b0e56',\n    'Content-Type': 'application/json'\n  }\n});","map":{"version":3,"names":["Api","constructor","settings","_baseUrl","baseUrl","_headers","headers","_testRes","res","ok","json","Promise","reject","status","getUserInfo","fetch","then","getDefoltElements","postNewCard","cardInfo","method","body","JSON","stringify","name","link","deleteCard","cardData","_id","patchUserInfo","userData","about","changeLikeCardStatus","cardId","isLiked","patchAvatar","avatarData","avatar","avatarurl","api","authorization"],"sources":["/Users/mark/dev/mesto-react/src/utils/Api.js"],"sourcesContent":["class Api {\n    constructor(settings) {\n        this._baseUrl = settings.baseUrl;\n        this._headers = settings.headers;\n    }\n\n    _testRes(res) {\n        if (res.ok) {\n            return res.json();\n        }\n        return Promise.reject(`Ошибка: ${res.status}`);\n    }\n\n    getUserInfo() {\n        return fetch(`${this._baseUrl}/users/me`, { headers: this._headers })\n            .then(res => this._testRes(res))\n    }\n\n    getDefoltElements() {\n        return fetch(`${this._baseUrl}/cards`, { headers: this._headers })\n            .then(res => this._testRes(res))\n    }\n\n    postNewCard(cardInfo) {\n        return fetch(`${this._baseUrl}/cards`, {\n            method: 'POST',\n            headers: this._headers,\n            body: JSON.stringify({\n                name: cardInfo.name,\n                link: cardInfo.link\n            })\n        })\n            .then(res => this._testRes(res))\n    }\n\n    deleteCard(cardData) {\n        return fetch(`${this._baseUrl}/cards/${cardData._id}`, {\n            method: 'DELETE',\n            headers: this._headers,\n        })\n            .then(res => this._testRes(res))\n    }\n\n    patchUserInfo(userData) {\n        return fetch(`${this._baseUrl}/users/me`, {\n            method: 'PATCH',\n            headers: this._headers,\n            body: JSON.stringify({\n                name: userData.name,\n                about: userData.about\n            })\n        })\n            .then(res => this._testRes(res))\n    }\n\n    changeLikeCardStatus(cardId, isLiked) {\n        if (!isLiked) {\n            return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n                        method: 'PUT',\n                        headers: this._headers\n                    })\n                        .then(res => this._testRes(res))\n        } else {\n            return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n                        method: 'DELETE',\n                        headers: this._headers\n                    })\n                        .then(res => this._testRes(res))\n        }\n    }\n\n    patchAvatar(avatarData) {\n        return fetch(`${this._baseUrl}/users/me/avatar`, {\n            method: 'PATCH',\n            headers: this._headers,\n            body: JSON.stringify({\n                avatar: avatarData.avatarurl\n            })\n        })\n            .then(res => this._testRes(res))\n    }\n}\n\nexport const api = new Api({\n    baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-64',\n    headers: {\n        authorization: '6891c063-8435-431b-87d5-a0d9903b0e56',\n        'Content-Type': 'application/json'\n    }\n})\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}